#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from calculadora import Calculadora
from calculadora.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  double suma(double num1, double num2)')
    print('  double resta(double num1, double num2)')
    print('  double mult(double a, double b)')
    print('  double division(double a, double b)')
    print('  i64 modulo(i64 dividendo, i64 divisor)')
    print('  double raiz_cuadrada(double a)')
    print('  double logaritmo(i64 a, i64 b)')
    print('  bool es_primo(i64 a)')
    print('  i64 potencia(i64 base, i64 exp)')
    print('  i64 factorial(i64 a)')
    print('   suma_matricial( a,  b)')
    print('   resta_matricial( a,  b)')
    print('   mult_matricial( a,  b)')
    print('   traspuesta( a)')
    print('  double determinante_matriz( a)')
    print('  string biseccion(string ecuacion, double error, double inf, double sup)')
    print('  double multiples_comandos(string cadena, double x)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Calculadora.Client(protocol)
transport.open()

if cmd == 'suma':
    if len(args) != 2:
        print('suma requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma(eval(args[0]), eval(args[1]),))

elif cmd == 'resta':
    if len(args) != 2:
        print('resta requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta(eval(args[0]), eval(args[1]),))

elif cmd == 'mult':
    if len(args) != 2:
        print('mult requires 2 args')
        sys.exit(1)
    pp.pprint(client.mult(eval(args[0]), eval(args[1]),))

elif cmd == 'division':
    if len(args) != 2:
        print('division requires 2 args')
        sys.exit(1)
    pp.pprint(client.division(eval(args[0]), eval(args[1]),))

elif cmd == 'modulo':
    if len(args) != 2:
        print('modulo requires 2 args')
        sys.exit(1)
    pp.pprint(client.modulo(eval(args[0]), eval(args[1]),))

elif cmd == 'raiz_cuadrada':
    if len(args) != 1:
        print('raiz_cuadrada requires 1 args')
        sys.exit(1)
    pp.pprint(client.raiz_cuadrada(eval(args[0]),))

elif cmd == 'logaritmo':
    if len(args) != 2:
        print('logaritmo requires 2 args')
        sys.exit(1)
    pp.pprint(client.logaritmo(eval(args[0]), eval(args[1]),))

elif cmd == 'es_primo':
    if len(args) != 1:
        print('es_primo requires 1 args')
        sys.exit(1)
    pp.pprint(client.es_primo(eval(args[0]),))

elif cmd == 'potencia':
    if len(args) != 2:
        print('potencia requires 2 args')
        sys.exit(1)
    pp.pprint(client.potencia(eval(args[0]), eval(args[1]),))

elif cmd == 'factorial':
    if len(args) != 1:
        print('factorial requires 1 args')
        sys.exit(1)
    pp.pprint(client.factorial(eval(args[0]),))

elif cmd == 'suma_matricial':
    if len(args) != 2:
        print('suma_matricial requires 2 args')
        sys.exit(1)
    pp.pprint(client.suma_matricial(eval(args[0]), eval(args[1]),))

elif cmd == 'resta_matricial':
    if len(args) != 2:
        print('resta_matricial requires 2 args')
        sys.exit(1)
    pp.pprint(client.resta_matricial(eval(args[0]), eval(args[1]),))

elif cmd == 'mult_matricial':
    if len(args) != 2:
        print('mult_matricial requires 2 args')
        sys.exit(1)
    pp.pprint(client.mult_matricial(eval(args[0]), eval(args[1]),))

elif cmd == 'traspuesta':
    if len(args) != 1:
        print('traspuesta requires 1 args')
        sys.exit(1)
    pp.pprint(client.traspuesta(eval(args[0]),))

elif cmd == 'determinante_matriz':
    if len(args) != 1:
        print('determinante_matriz requires 1 args')
        sys.exit(1)
    pp.pprint(client.determinante_matriz(eval(args[0]),))

elif cmd == 'biseccion':
    if len(args) != 4:
        print('biseccion requires 4 args')
        sys.exit(1)
    pp.pprint(client.biseccion(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'multiples_comandos':
    if len(args) != 2:
        print('multiples_comandos requires 2 args')
        sys.exit(1)
    pp.pprint(client.multiples_comandos(args[0], eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
