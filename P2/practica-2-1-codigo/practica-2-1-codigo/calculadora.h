/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct suma_1_argument {
	double arg1;
	double arg2;
};
typedef struct suma_1_argument suma_1_argument;

struct resta_1_argument {
	double arg1;
	double arg2;
};
typedef struct resta_1_argument resta_1_argument;

struct mult_1_argument {
	double arg1;
	double arg2;
};
typedef struct mult_1_argument mult_1_argument;

struct div_1_argument {
	double arg1;
	double arg2;
};
typedef struct div_1_argument div_1_argument;

struct pow_1_argument {
	int arg1;
	int arg2;
};
typedef struct pow_1_argument pow_1_argument;

struct log_1_argument {
	int arg1;
	int arg2;
};
typedef struct log_1_argument log_1_argument;

struct modulo_1_argument {
	int arg1;
	int arg2;
};
typedef struct modulo_1_argument modulo_1_argument;

#define CALCULADORA 0x20000001
#define CALCULADORAVER 1

#if defined(__STDC__) || defined(__cplusplus)
#define suma 1
extern  double * suma_1(double , double , CLIENT *);
extern  double * suma_1_svc(double , double , struct svc_req *);
#define resta 2
extern  double * resta_1(double , double , CLIENT *);
extern  double * resta_1_svc(double , double , struct svc_req *);
#define mult 3
extern  double * mult_1(double , double , CLIENT *);
extern  double * mult_1_svc(double , double , struct svc_req *);
#define div 4
extern  double * div_1(double , double , CLIENT *);
extern  double * div_1_svc(double , double , struct svc_req *);
#define pow 5
extern  int * pow_1(int , int , CLIENT *);
extern  int * pow_1_svc(int , int , struct svc_req *);
#define primo 6
extern  int * primo_1(int , CLIENT *);
extern  int * primo_1_svc(int , struct svc_req *);
#define sqrt 7
extern  int * sqrt_1(int , CLIENT *);
extern  int * sqrt_1_svc(int , struct svc_req *);
#define log 8
extern  double * log_1(int , int , CLIENT *);
extern  double * log_1_svc(int , int , struct svc_req *);
#define modulo 9
extern  int * modulo_1(int , int , CLIENT *);
extern  int * modulo_1_svc(int , int , struct svc_req *);
extern int calculadora_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define suma 1
extern  double * suma_1();
extern  double * suma_1_svc();
#define resta 2
extern  double * resta_1();
extern  double * resta_1_svc();
#define mult 3
extern  double * mult_1();
extern  double * mult_1_svc();
#define div 4
extern  double * div_1();
extern  double * div_1_svc();
#define pow 5
extern  int * pow_1();
extern  int * pow_1_svc();
#define primo 6
extern  int * primo_1();
extern  int * primo_1_svc();
#define sqrt 7
extern  int * sqrt_1();
extern  int * sqrt_1_svc();
#define log 8
extern  double * log_1();
extern  double * log_1_svc();
#define modulo 9
extern  int * modulo_1();
extern  int * modulo_1_svc();
extern int calculadora_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_suma_1_argument (XDR *, suma_1_argument*);
extern  bool_t xdr_resta_1_argument (XDR *, resta_1_argument*);
extern  bool_t xdr_mult_1_argument (XDR *, mult_1_argument*);
extern  bool_t xdr_div_1_argument (XDR *, div_1_argument*);
extern  bool_t xdr_pow_1_argument (XDR *, pow_1_argument*);
extern  bool_t xdr_log_1_argument (XDR *, log_1_argument*);
extern  bool_t xdr_modulo_1_argument (XDR *, modulo_1_argument*);

#else /* K&R C */
extern bool_t xdr_suma_1_argument ();
extern bool_t xdr_resta_1_argument ();
extern bool_t xdr_mult_1_argument ();
extern bool_t xdr_div_1_argument ();
extern bool_t xdr_pow_1_argument ();
extern bool_t xdr_log_1_argument ();
extern bool_t xdr_modulo_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
